*Git Push, Pull and Fetch - What is the Difference?* <!--The previous title was ambiguous since it did not mention what push, pull and fetch were in relation to. It is important not to make too many assumptions about the audience, but for this article I am assuming the audience is tech savvy and not necessarily familiar with Git software as an application.-->

The Git application is a fast, scalable, and distributed revision control system that uses three primary commands to upload and download repository files: <!--It is important to first define the application we are working with, Git software, so users do not confuse the push, pull and fetch commands with another software program.-->

* *Git push* - Use to upload local repository content to a remote repository<!--Notice how each description of the push, fetch and pull functions contains a present-tense verb. Also, the same verbage is utilized in each function's description, making it more user friendly. Finally, all three functions are presented as a list to increase readability for users. -->
* *Git pull* - Use to download remote repository content to a local repository

* *Git fetch* - Use to download content from a remote repository <!--The verbage in all three descriptions is consecutive in the use of the word repository. It would only confuse readers if the word repository was replaced with another word such as directory. -->

To share code between repositories, utilize *git push* to transfer content from any local tracking branches to the remote repository. Changes are pushed from your local branch to the remote repository. <!--At this point, Git push is described first, since it is at the top of list of functions.-->This *git push* command fails if the remote branch has diverged in any away from your local branch. To solve this problem, synchronize the local branch with the remote branch by utilizing *git pull* or *git fetch* combined with *git merge*. <!--The previous article included instructions jumbled into one paragraph, which makes it difficult for users to read. Therefore, the *git push*, *git pull* and *git fetch* commands are explained in separate paragraphs, punctuated with questions users might have, along with answers to those questions.--> For instance, *git fetch* will check any tracking branches for changes to the remote branch, and then pull those changes into the tracking branch. The local branch is not changed. <!--Here is an example of the *git fetch* command, and it is important to note that the local branch will not be changed when this command in used. Many times new users become confused on this point, and think their local repository receives the changes made on a tracking branch when using git fetch. -->

**Questions**

* *How do you pull changes in your tracking branch to your local branch?*  Use the command *git merge origin/master*, which will merge changes into the "master" branch. <!--While the *git merge origin/master* command is not featured in the list at the top of the article, it appears to be a natural progression to mention it here, because users will wonder how to pull changes into their local branch from their tracking branch. -->

* *What is the difference between *git pull* and *git fetch*?*  The *git pull* command does a *git fetch* and is immediately followed by *git merge*. Content is pulled and merged automatically from the remote repository to the local repository. *Git fetch* only checks for a tracking branch, looks for changes in the remote branch and then pulls the changes into the tracking branch. It is important to remember that the local branch is not changed. <!--The initial descriptions of the *git pull* and *git fetch* commands are not sufficient in describing the difference between these two, and they are compared here because the commands are very similiar in functionality.--> Often, users prefer to utilize the *git fetch* command first over the *git pull* command, so they can first visualize the changes to be merged into their local branch. <!--This sentence highlights user preferences and the advantages for using one command over another.-->

This article highlights the branching capabilities of Git software which allows for the easy merging of content, popular branch workflow and version control. The *git push*, *git pull* and *git fetch* commands are just a few of the many commands utilized in this sofware application. <!--It is important to include a conclusion to the article, while not introducing any new material to the article. Only include content that has already been reviewed.-->